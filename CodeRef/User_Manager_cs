using DataAccessLayer;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography;
using DataObjects;

namespace LogicLayer
{
    public class UserManager : IUserManager
    {
        private IUserAccessor _userAccessor;

        public UserManager()
        {
            _userAccessor = new UserAccessor();
        }

        public UserManager(IUserAccessor userAccessor)
        {
            _userAccessor = userAccessor;
        }

        public bool AddUser(User user)
        {
            bool result = true;
            try
            {
                result = _userAccessor.InsertEmployee(user) > 0;
            }
            catch (Exception ex)
            {
                throw new ApplicationException("User not added", ex);
            }
            return result;
        }

        public bool AddUserRole(int employeeID, string role)
        {
            bool result = false;

            try
            {
                result = 1 == _userAccessor.InsertOrDeleteEmployeeRole(employeeID,role);
            }
            catch (Exception ex)
            {

                throw ex;
            }
            return result;
        }

        public bool DeleteUserRole(int employeeID, string role)
        {
            bool result = false;

            try
            {
                result = 1 == _userAccessor.InsertOrDeleteEmployeeRole(employeeID, role);
            }
            catch (Exception ex)
            {

                throw ex;
            }
            return result;
        }

        public User AuthenticateUser(string email, string password)
        {
            User result = null;

            // we need to hash the password
            var passwordHash = hashPassword(password);
            password = null;

            try
            {
                result = _userAccessor.AuthenticateUser(email, passwordHash);
            }
            catch (Exception ex)
            {
                throw new ApplicationException("Login failed!", ex);
            }

            return result;
        }

        public bool EditUser(User oldUser, User newUser)
        {
            bool result = false;

            try
            {
                result = _userAccessor.UpdateEmployee(oldUser, newUser) == 1;
            }
            catch (Exception ex)
            {
                throw new ApplicationException("Update failed", ex);
            }

            return result;
        }

        public List<string> RetrieveEmployeeRoles(int employeeID)
        {
            List<string> roles = null;
            try
            {
                roles = _userAccessor.SelectRolesByEmployeeID(employeeID);
            }
            catch (Exception ex)
            {

                throw new ApplicationException("Roles not found", ex);
            }
            return roles;
        }

        public List<string> RetrieveEmployeeRoles()
        {
            List<string> roles = null;
            try
            {
                roles = _userAccessor.SelectAllRoles();
            }
            catch (Exception ex)
            {

                throw new ApplicationException("Roles not found", ex);
            }
            return roles;
        }

        public List<User> RetrieveUserListByActive(bool active = true)
        {
            try
            {
                return _userAccessor.SelectUsersByActive(active);
            }
            catch (Exception ex)
            {
                throw new ApplicationException("Data not found.", ex);
            }
        }

        public bool SetUserActiveState(bool active, int employeeID)
        {
            bool result = false;
            try
            {
                if(active)
                {
                    result = 1 == _userAccessor.ActivateEmployee(employeeID);
                }
                else
                {
                    result = 1 == _userAccessor.DeactivateEmployee(employeeID);
                }
                if(result == false)
                {
                    throw new ApplicationException("Employee record not updated.");
                }
            }
            catch (Exception ex)
            {
                throw new ApplicationException("Update failed!", ex);
            }
            return result;
        }

        public bool UpdatePassword(int employeeID, string newPassword, string oldPassword)
        {
            bool isUpdated = false;
            string newPasswordHash = hashPassword(newPassword);
            string oldPasswordHash = hashPassword(oldPassword);

            try
            {
                isUpdated = _userAccessor.UpdatePasswordHash(employeeID,
                   oldPasswordHash, newPasswordHash);
            }
            catch (Exception ex)
            {
                throw new ApplicationException("Update Failed",ex);
            }
            return isUpdated;
        }

        private string hashPassword(string source)
        {
            // use SHA256
            string result = null;

            // we need a byte array because cryptography is bits and bytes
            byte[] data;

            // create a has provider object
            using(SHA256 sha256hash = SHA256.Create())
            {
                // hash the input
                data = sha256hash.ComputeHash(Encoding.UTF8.GetBytes(source));
            }
            // build a string from the result
            var s = new StringBuilder();

            // loop through the bytes to build a string
            for (int i = 0; i < data.Length; i++)
            {
                s.Append(data[i].ToString("x2"));
            }

            result = s.ToString().ToUpper();

            return result;
        }
    }
}
